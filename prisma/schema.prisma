generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
    CUSTOMER
    VENDOR
    ADMIN
}

model User {
    id String @id @default(cuid())

    name             String
    email            String    @unique
    emailVerified    DateTime?
    image            String
    role             UserRole  @default(CUSTOMER)
    accountSetupDone Boolean   @default(false)
    joinedOn         DateTime  @default(now())
    rating           Float     @default(0.0) @db.Float()

    foodItems foodItem[]
    cartItems cartItem[]

    customerOrders order[] @relation("customer")
    vendorOrders   order[] @relation("vendor")

    notifications notification[]

    accounts Account[]
    sessions Session[]
}

model foodItem {
    id String @id @default(cuid())

    name        String   @db.VarChar(50)
    description String   @db.VarChar(255)
    image       String   @db.VarChar(255)
    createdOn   DateTime @default(now())
    price       Float    @default(0.0) @db.Double()

    vendor User   @relation(fields: [userId], references: [id])
    userId String

    cartItems cartItem[]
}

model cartItem {
    id       String @id @default(cuid())
    quantity Int    @default(1) @db.Int()

    foodItem    foodItem @relation(fields: [foodItemsId], references: [id])
    foodItemsId String

    user   User   @relation(fields: [userId], references: [id])
    userId String

    order   order?  @relation(fields: [orderId], references: [id])
    orderId String?
}

model order {
    id        String     @id @default(cuid())
    totalCost Float      @default(0.0) @db.Double()
    cartItems cartItem[]

    user       User   @relation("customer", fields: [customerId], references: [id])
    customerId String

    vendor   User   @relation("vendor", fields: [vendorId], references: [id])
    vendorId String

    review review[]
}

model review {
    id String @id @default(cuid())

    rating Int    @default(0) @db.Int()
    text   String @default("") @db.VarChar(255)

    order   order  @relation(fields: [orderId], references: [id])
    orderId String
}

model notification {
    id   String  @id @default(cuid())
    text String  @default("") @db.VarChar(255)
    url  String  @default(".") @db.VarChar(255)
    icon String  @default("/favicon.ico") @db.VarChar(255)
    seen Boolean @default(false)

    user   User   @relation(fields: [userId], references: [id])
    userId String
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
